set opt_level=none
set tls_model=macho
set libcall_call_conv=isa_default
set probestack_size_log2=12
set probestack_strategy=inline
set bb_padding_log2_minus_one=0
set regalloc_checker=0
set regalloc_verbose_logs=0
set enable_alias_analysis=1
set enable_verifier=0
set enable_pcc=0
set is_pic=1
set use_colocated_libcalls=0
set enable_float=1
set enable_nan_canonicalization=0
set enable_pinned_reg=0
set enable_atomics=1
set enable_safepoints=0
set enable_llvm_abi_extensions=1
set unwind_info=1
set preserve_frame_pointers=1
set machine_code_cfg_info=0
set enable_probestack=1
set enable_jump_tables=1
set enable_heap_access_spectre_mitigation=1
set enable_table_access_spectre_mitigation=1
set enable_incremental_compilation_cache_checks=0
target aarch64 has_lse=0 has_pauth=0 sign_return_address_all=0 sign_return_address=0 sign_return_address_with_bkey=0 use_bti=0


function u0:0(i64, i64, i64, i8) -> i64 apple_aarch64 {
; symbol _ZN3std2rt10lang_start17h063ae44be5347737E
; instance Instance { def: Item(DefId(1:44 ~ std[6a0d]::rt::lang_start)), args: [()] }
; abi FnAbi { args: [ArgAbi { layout: TyAndLayout { ty: fn(), layout: Layout { size: Size(8 bytes), align: AbiAndPrefAlign { abi: Align(8 bytes), pref: Align(8 bytes) }, abi: Scalar(Initialized { value: Pointer(AddressSpace(0)), valid_range: 1..=18446744073709551615 }), fields: Primitive, largest_niche: Some(Niche { offset: Size(0 bytes), value: Pointer(AddressSpace(0)), valid_range: 1..=18446744073709551615 }), variants: Single { index: 0 }, max_repr_align: None, unadjusted_abi_align: Align(8 bytes) } }, mode: Direct(ArgAttributes { regular: NonNull | NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) }, ArgAbi { layout: TyAndLayout { ty: isize, layout: Layout { size: Size(8 bytes), align: AbiAndPrefAlign { abi: Align(8 bytes), pref: Align(8 bytes) }, abi: Scalar(Initialized { value: Int(I64, true), valid_range: 0..=18446744073709551615 }), fields: Primitive, largest_niche: None, variants: Single { index: 0 }, max_repr_align: None, unadjusted_abi_align: Align(8 bytes) } }, mode: Direct(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) }, ArgAbi { layout: TyAndLayout { ty: *const *const u8, layout: Layout { size: Size(8 bytes), align: AbiAndPrefAlign { abi: Align(8 bytes), pref: Align(8 bytes) }, abi: Scalar(Initialized { value: Pointer(AddressSpace(0)), valid_range: 0..=18446744073709551615 }), fields: Primitive, largest_niche: None, variants: Single { index: 0 }, max_repr_align: None, unadjusted_abi_align: Align(8 bytes) } }, mode: Direct(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) }, ArgAbi { layout: TyAndLayout { ty: u8, layout: Layout { size: Size(1 bytes), align: AbiAndPrefAlign { abi: Align(1 bytes), pref: Align(1 bytes) }, abi: Scalar(Initialized { value: Int(I8, false), valid_range: 0..=255 }), fields: Primitive, largest_niche: None, variants: Single { index: 0 }, max_repr_align: None, unadjusted_abi_align: Align(1 bytes) } }, mode: Direct(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) }], ret: ArgAbi { layout: TyAndLayout { ty: isize, layout: Layout { size: Size(8 bytes), align: AbiAndPrefAlign { abi: Align(8 bytes), pref: Align(8 bytes) }, abi: Scalar(Initialized { value: Int(I64, true), valid_range: 0..=18446744073709551615 }), fields: Primitive, largest_niche: None, variants: Single { index: 0 }, max_repr_align: None, unadjusted_abi_align: Align(8 bytes) } }, mode: Direct(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) }, c_variadic: false, fixed_count: 4, conv: Rust, can_unwind: false }

; kind  loc.idx   param    pass mode                            ty
; ssa   _0    isize                             8b 8, 8              var=0
; ret   _0      -          Direct(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) isize
; arg   _1      = v0       Direct(ArgAttributes { regular: NonNull | NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) Binder { value: fn(), bound_vars: [] }
; arg   _2      = v1       Direct(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) isize
; arg   _3      = v2       Direct(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) *const *const u8
; arg   _4      = v3       Direct(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) u8

; kind  local ty                              size align (abi,pref)
; ssa   _1    Binder { value: fn(), bound_vars: [] }    8b 8, 8              var=1
; ssa   _2    isize                             8b 8, 8              var=2
; ssa   _3    *const *const u8                  8b 8, 8              var=3
; ssa   _4    u8                                1b 1, 1              var=4
; stack _5    std::result::Result<isize, !>     8b 8, 8              storage=ss0
; ssa   _6    &'{erased} dyn [Binder { value: Trait(std::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = i32), bound_vars: [] }, Binder { value: AutoTrait(DefId(2:36262 ~ core[0294]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(2:3244 ~ core[0294]::marker::Sync)), bound_vars: [] }] + '{erased}   16b 8, 8              var=(5, 6)
; ssa   _7    &'{erased} Closure(DefId(1:46 ~ std[6a0d]::rt::lang_start::{closure#0}), [(), i8, Binder { value: extern "RustCall" fn(()) -> i32, bound_vars: [] }, (Binder { value: fn(), bound_vars: [] },)])    8b 8, 8              var=7
; stack _8    Closure(DefId(1:46 ~ std[6a0d]::rt::lang_start::{closure#0}), [(), i8, Binder { value: extern "RustCall" fn(()) -> i32, bound_vars: [] }, (Binder { value: fn(), bound_vars: [] },)])    8b 8, 8              storage=ss1

    ss0 = explicit_slot 16, align = 16
    ss1 = explicit_slot 16, align = 16
    gv0 = symbol colocated userextname0 ; vtable
    sig0 = (i64, i64, i64, i64, i8) -> i64 apple_aarch64
    fn0 = u0:10 sig0 ; Instance { def: Item(DefId(1:36 ~ std[6a0d]::rt::lang_start_internal)), args: [] }

block0(v0: i64, v1: i64, v2: i64, v3: i8):
    nop 
; write_cvalue: Var(_1, var1): Binder { value: fn(), bound_vars: [] } <- ByVal(v0): Binder { value: fn(), bound_vars: [] }
; write_cvalue: Var(_2, var2): isize <- ByVal(v1): isize
; write_cvalue: Var(_3, var3): *const *const u8 <- ByVal(v2): *const *const u8
; write_cvalue: Var(_4, var4): u8 <- ByVal(v3): u8
    jump block1

block1:
    nop 
; _8 = {closure@/Users/nihal.pasham/devspace/compiler/rustc_codegen_cranelift/build/stdlib/library/std/src/rt.rs:159:10: 159:17} { 0: _1 }
; write_cvalue: Addr(Pointer { base: Stack(ss1), offset: Offset32(0) }, None): Binder { value: fn(), bound_vars: [] } <- ByVal(v4): Binder { value: fn(), bound_vars: [] }
    v12 = stack_addr.i64 ss1
    store.i64 notrap v0, v12
; _7 = &_8
    v5 = stack_addr.i64 ss1
; write_cvalue: Var(_7, var7): &'{erased} Closure(DefId(1:46 ~ std[6a0d]::rt::lang_start::{closure#0}), [(), i8, Binder { value: extern "RustCall" fn(()) -> i32, bound_vars: [] }, (Binder { value: fn(), bound_vars: [] },)]) <- ByVal(v5): &'{erased} Closure(DefId(1:46 ~ std[6a0d]::rt::lang_start::{closure#0}), [(), i8, Binder { value: extern "RustCall" fn(()) -> i32, bound_vars: [] }, (Binder { value: fn(), bound_vars: [] },)])
; _6 = move _7 as &dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe (PointerCoercion(Unsize))
    v6 = symbol_value.i64 gv0
; write_cvalue: VarPair(_6, var5, var6): &'{erased} dyn [Binder { value: Trait(std::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = i32), bound_vars: [] }, Binder { value: AutoTrait(DefId(2:36262 ~ core[0294]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(2:3244 ~ core[0294]::marker::Sync)), bound_vars: [] }] + '{erased} <- ByValPair(v5, v6): &'{erased} dyn [Binder { value: Trait(std::ops::Fn<()>), bound_vars: [] }, Binder { value: Projection(Output = i32), bound_vars: [] }, Binder { value: AutoTrait(DefId(2:36262 ~ core[0294]::panic::unwind_safe::RefUnwindSafe)), bound_vars: [] }, Binder { value: AutoTrait(DefId(2:3244 ~ core[0294]::marker::Sync)), bound_vars: [] }] + '{erased}
; 
; _5 = std::rt::lang_start_internal(move _6, move _2, move _3, move _4)
    v10 = call fn0(v5, v6, v1, v2, v3)
; write_cvalue: Addr(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): std::result::Result<isize, !> <- ByVal(v10): std::result::Result<isize, !>
    v13 = stack_addr.i64 ss0
    store notrap v10, v13
    jump block2

block2:
    nop 
; _0 = ((_5 as Ok).0: isize)
; write_cvalue: Var(_0, var0): isize <- ByRef(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): isize
    v14 = stack_addr.i64 ss0
    v11 = load.i64 notrap v14
; 
; return
    return v11
}
